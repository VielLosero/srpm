#!/bin/bash
#
## Copyright (c) 2024 VielLosero 
#
# This file is part of srpm. 
# srpm is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, 
# or (at your option) any later version.
#
# srpm is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with srpm. If not, see <https://www.gnu.org/licenses/>. 
#
## srpm, - A simple repository & package manager for Slackware Linux.
#
# Slackware® is a Registered Trademark of Patrick Volkerding. 
# Linux® is a Registered Trademark of Linus Torvalds.

# Get function sources.
source /usr/libexec/srpm/srpm.functions.sh

# making/format helper file for installed packages
ls -1 /var/lib/pkgtools/packages/ | sed 's/$/.asc/' | sed 's:^:no  ./n/a/:' > ${SRPM_HELPFILES}/INSTALLED.CHECKSUMS.md5 

TMPDIR=${TMPDIR:-/tmp/srpm} && [[ -d $TMPDIR ]] || mkdir -vp $TMPDIR

while [ -n "$1" ] ; do
  case $1 in  
    install)
      shift
      LISTINSTALL=$@
      shift $#
      gettags_from_config_file
      for PACKAGE in $LISTINSTALL ; do
        FOUND=""
        for TAG in $REPO_TAGS ; do  
          getrepo_vars
					if [ $TAG == "SLACKWARE" ] ; then
  				  for FOUND_PKG in $(grep "${PACKAGE}.*.asc$" ${REPO_DB_SOURCE}/CHECKSUMS.md5 )  ; do
    				  if [ "$(echo $FOUND_PKG |rev|cut -d- -f4-|cut -d/ -f1|rev)" == "$PACKAGE" ] ; then
                echo "-----------------------------------"
      				  echo "${TAG}: ${REPO_DB_SOURCE}/$FOUND_PKG"
    				  fi
					  done
          fi
          if [ $TAG == "SBO" ] ; then
  				  for FOUND_PKG in $(grep "$PACKAGE.*.asc$" ${REPO_DB_SOURCE}/CHECKSUMS.md5 )  ; do
    				  if [ "$(echo $FOUND_PKG |rev|cut -d. -f4-|cut -d/ -f1|rev)" == "$PACKAGE" ] ; then
                echo "-----------------------------------"
      				  echo "${TAG}: ${REPO_DB_SOURCE}/$FOUND_PKG"
    				  fi
            done
          fi
          echo "-----------------------------------"
          echo "use gpg --verify file.asc to check package"
          echo "then if it's ok use installpkg for slackware packages"
          echo "or extract in tmp download sources and use SlackBuild for slackbuilds"

        #  if FILEPATH=$(grep "${PACKAGE}.*.asc$" ${REPO_DB_SOURCE}/patches/CHECKSUMS.md5 2>/dev/null) ; then
        #    cd ${REPO_DB_SOURCE}/patches/
        #    echo $FILEPATH | md5sum -c && FILEPATH=$(echo $FILEPATH | cut -d" " -f2) && \
        #    gpg --verify ${REPO_DB_SOURCE}/patches/${FILEPATH}.asc &>/dev/null || bad_signature 
        #    FOUND="$TAG patches/$FILEPATH"
        #  elif FILEPATH=$(grep "${PACKAGE}.*.asc$" ${REPO_DB_SOURCE}/extra/CHECKSUMS.md5 2>/dev/null) ; then
        #    cd ${REPO_DB_SOURCE}/extra/
        #    echo $FILEPATH | md5sum -c && FILEPATH=$(echo $FILEPATH | cut -d" " -f2) && \
        #    gpg --verify ${REPO_DB_SOURCE}/extra/${FILEPATH}.asc &>/dev/null || bad_signature
        #    FOUND="$TAG extra/$FILEPATH"
        #  elif FILEPATH=$(grep "${PACKAGE}.*.asc$" ${REPO_DB_SOURCE}/CHECKSUMS.md5 2>/dev/null) ; then
        #    cd ${REPO_DB_SOURCE}/
        #    echo $FILEPATH | md5sum -c && FILEPATH=$(echo $FILEPATH | cut -d" " -f2) && \
        #    gpg --verify ${REPO_DB_SOURCE}/${FILEPATH}.asc &>/dev/null || bad_signature
        #    FOUND="$TAG $FILEPATH"
        #  fi
        done
        ## if don't find package
        #if [ -z "$FOUND" ] ; then
        #  echo "Package $PACKAGE not found"
        #else
        #  FOUND_REPO=$(echo $FOUND | cut -d" " -f1)
        #  FOUND_PATH=$(echo $FOUND | cut -d" " -f2)
        #  echo "${FOUND_REPO}: installing ${REPO_DB_SOURCE}/$FOUND_PATH"
        #  if [ "$FOUND_REPO" == "SBO" ] ; then
        #    echo "sbopkg -i $PACKAGE"
        #  elif [ "$FOUND_REPO" == "SLACKWARE" ] ; then
        #    echo "slackpkg install $PACKAGE"
        #  fi
        #fi
      done
      ;;
    remove)
      shift
      REMOVEARGS=$@
      shift $#
      echo "*** srpm -pr act as frontend for removepkg ***"
      echo "*** For more info use man removepkg ***"
      removepkg $REMOVEARGS | sed 's/removepkg/srpm -pr/g'
      ;;
    search)
      shift
      SEARCHLIST=$@
      #echo "Searching for $SEARCHLIST"
      shift $#
      #for PACKAGE in $SEARCHLIST ; do
      #  echo +--------------------------------------+
      #  grep "\.asc$" \
      #    ${SRPM_HELPFILES}/INSTALLED.CHECKSUMS.md5 \
      #    $SRPM_DBFILES/*.CHECKSUMS.md5 | \
      #    grep -v "  \./source" | grep -v "  \./testing" |\
      #    grep -v "  \./source" | grep -v "  \./testing" | grep -v "  \./patches/source/" |\
      #    cut -d/ -f6- | sed 's: ./::g' | sed 's/.CHECKSUMS.md5:/: /' | \
      #    cut -d" " -f1,3 | rev | sed 's:/: :' | rev | sed 's/\.asc$//' | grep "$SEARCHLIST"
      #    #cut -d" " -f1,3 | rev | sed 's:/: :' | rev | sed 's/\.asc$//' | grep "$PACKAGE"
      #  
      #  echo +--------------------------------------+
      #done
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $SEARCHLIST ; do
        if [ "$TAG" == "SBO" ] ; then
          FILEPATH=$(grep "SlackBuild$"  ${REPO_DB_SOURCE}/CHECKSUMS.md5 | \
            sed 's:.*/::' | grep -i "^${PACKAGE}.*.SlackBuild$" | cut -d. -f1)
        fi
        if [ "$TAG" == "SLACKWARE" ] ; then
          FILEPATH=$(grep "\.t.z$"  ${REPO_DB_SOURCE}/CHECKSUMS.md5 | \
            sed 's:.*/::' | rev| cut -d- -f4- | rev | grep -i "^${PACKAGE}")
        fi
          if [ -n "$FILEPATH" ] ; then
            echo "$FILEPATH" | sed "s/.*/${TAG}: &/"
          fi
        done
      done
      # cambiamos la perspectiva , mejor descargar los CHECKSUM y copiarlos con SLACKWARE.CHECKSUM y SBO.CHECKSUM ??
      # [root@arcadia tmp]# grep "\.asc$" /opt/slackware-repositories/x86/slackware/slackware64-15.0/CHECKSUMS.md5 /opt/slackware-repositories/slackbuilds/15.0/CHECKSUMS.md5 | cut -d: -f2- | cut -d" " -f3- | grep -v "^\./source" | grep -v "^\./testing"
      # [root@arcadia tmp]# grep "\.asc$" /opt/slackware-repositories/x86/slackware/slackware64-15.0/CHECKSUMS.md5 /opt/slackware-repositories/slackbuilds/15.0/CHECKSUMS.md5 | cut -d: -f2- | cut -d" " -f3- | grep -v "^\./source" | grep -v "^\./testing" | sed 's:./::' | rev |sed 's:/: :' | rev | sed 's/.asc$//'|  grep aaa
      #
      #
      # [root@arcadia packages]#   find . -type f -exec md5sum {} + | sed 's/$/.asc/'  >  /var/lib/srpm/INSTALLED.CHECKSUMS.md5
      #
      #sanity check
      # grep "\.asc$" /opt/slackware-repositories/x86/slackware/slackware64-15.0/CHECKSUMS.md5 /opt/slackware-repositories/slackbuilds/15.0/CHECKSUMS.md5 | cut -d: -f2- |  grep -v "\.asc$" 
      #
      #
      #
      #
      #NEW SEARCH
      #[root@arcadia packages]# cp /var/lib/srpm/slackbuilds-15.0.CHECKSUM.md5 /var/lib/srpm/SBO-15.0.CHECKSUM.md5
      #[root@arcadia packages]# cp /var/lib/srpm/slackware64-15.0.CHECKSUM.md5 /var/lib/srpm/SLACKWARE64-15.0.CHECKSUM.md5
      #[root@arcadia packages]# ls -1 | sed 's/$/.asc/' |sed 's:^:no  ./n/a/:'   >  /var/lib/srpm/INSTALLED.CHECKSUM.md5
      #
      #[root@arcadia packages]# grep "\.asc$" /var/lib/srpm/INSTALLED.CHECKSUM.md5 /var/lib/srpm/SLACKWARE64-15.0.CHECKSUM.md5 /var/lib/srpm/SBO-15.0.CHECKSUM.md5 | grep -v "  \./source" | grep -v "  \./testing" | cut -d/ -f5- | sed 's: ./::g' | sed 's/.CHECKSUM.md5:/: /' | cut -d" " -f1,3 | rev | sed 's:/: :' | rev | sed 's/\.asc$//' | grep " bash-5"
      #[root@arcadia packages]# grep "\.asc$" /var/lib/srpm/INSTALLED.CHECKSUM.md5 /var/lib/srpm/SLACKWARE64-15.0.CHECKSUM.md5 /var/lib/srpm/SBO-15.0.CHECKSUM.md5 | grep -v "  \./source" | grep -v "  \./testing" | cut -d/ -f5- | sed 's: ./::g' | sed 's/.CHECKSUM.md5:/: /' | cut-d" " -f1,3 | rev | sed 's:/: :' | rev | sed 's/\.asc$//' | grep " ncompres"
      #
      #NEW SEARCH
      #
      #
      #
      #
      #

      ;;
    search-file)
      shift
      ;;
    description)
      shift
      DESCLIST=$@
      #echo "Description for $DESCLIST"
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $DESCLIST ; do
          FILEPATH=$(grep -n "\/${PACKAGE}.slack-desc" ${REPO_DB_SOURCE}/CHECKSUMS.md5 | head -1 | cut -d " " -f3)
          if [ -z $FILEPATH ] ; then
          FILEPATH=$(grep -n "\/slack-desc\.${PACKAGE}" ${REPO_DB_SOURCE}/CHECKSUMS.md5 | head -1 | cut -d " " -f3)
          fi
          if [ -n "$FILEPATH" ] ; then
            FILE="${REPO_DB_SOURCE}/${FILEPATH}"
            #echo $FILE
            if [ -e $FILE ] ; then 
              cat "${REPO_DB_SOURCE}/${FILEPATH}" | tail +9
            else
              # if no find on db try to download and show
              case $REPO_SOURCE_TYPE in
               file)
                 SOURCE="$(echo $REPO_SOURCE | sed 's%file://%%')"
                 ;;
               http|https)
                 SOURCE=$(echo $REPO_SOURCE)
                 #wget file on db and cat it
                 ;;
               ftp)
                 SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
                 ;;
               rsync)
                 SOURCE="$(echo $REPO_SOURCE)"
                 ;;
               git)
                 SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
                 ;;
              esac
            fi
          fi
        done
      done
      ;;
    needed)
      shift
      NEEDLIST=$@
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PKG in $NEEDLIST ; do
          #get_requires $PKG
          REQUIRES=("$PKG")
          #[[ $FOUND == 1 ]] && [[ -n $REQUIRES ]] && echo "$PKG $REQUIRES"
          #[[ $FOUND == 1 ]] && [[ -n $REQUIRES ]] && echo "${REQUIRES[@]}"
          while [ -n "${REQUIRES[*]}" ] ; do 
            for index in ${!REQUIRES[@]} ; do 
              #echo "array:${REQUIRES[@]}"
              #echo "${REQUIRES[$index]}"
              get_requires "${REQUIRES[$index]}"
              unset "REQUIRES[$index]"
              #echo "rest:${REQUIRES[@]}"
              #echo "rest:${#REQUIRES[@]}"
            done
          done
          #    # if no find on db try to download and show
          #    case $REPO_SOURCE_TYPE in
          #     file)
          #       SOURCE="$(echo $REPO_SOURCE | sed 's%file://%%')"
          #       ;;
          #     http|https)
          #       SOURCE=$(echo $REPO_SOURCE)
          #       #wget file on db and cat it
          #       ;;
          #     ftp)
          #       SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
          #       ;;
          #     rsync)
          #       SOURCE="$(echo $REPO_SOURCE)"
          #       ;;
          #     git)
          #       SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
          #       ;;
          #    esac
          #  fi
          #fi
        done
      done
      ;;
    unattended)
      shift
        #while read PKG ; do
        #  #echo $PKG
        #  LAST=$(/usr/sbin/srpm -pv $PKG | cut -d" " -f3)
        #  CURRENT=$(/usr/sbin/srpm -pv $PKG | cut -d" " -f6)
        #  #echo "LAST: $LAST CURRENT: $CURRENT"
        #  if [[ "$LAST" != "$CURRENT" ]] ; then 
        #    /usr/sbin/srpm -pv $PKG
        #  fi
        #done <<< $(ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f4- | rev) 
        rm ${TMPDIR}/PKGVER_ALL.TXT 2>/dev/null
        touch ${TMPDIR}/PKGVER_ALL.TXT
        gettags_from_config_file
        for TAG in $REPO_TAGS ; do  
          getrepo_vars
          if [ -e ${REPO_DB}/patches/PKGVER.TXT ] ; then
            cat ${REPO_DB}/patches/PKGVER.TXT >> ${TMPDIR}/PKGVER_ALL.TXT
          fi
          if [ -e ${REPO_DB}/extra/PKGVER.TXT ] ; then
            cat ${REPO_DB}/extra/PKGVER.TXT >> ${TMPDIR}/PKGVER_ALL.TXT
          fi
          if [ -e ${REPO_DB}/PKGVER.TXT ] ; then
            cat ${REPO_DB}/PKGVER.TXT >> ${TMPDIR}/PKGVER_ALL.TXT
          fi
        done
        # sort the file
        sort -o ${TMPDIR}/PKGVER_ALL.TXT ${TMPDIR}/PKGVER_ALL.TXT 
        rm ${TMPDIR}/PKGVER_INSTALLED.TXT 2>/dev/null
        ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f3- | sed 's/-/ /'| rev | sort > ${TMPDIR}/PKGVER_INSTALLED.TXT 
        diff -u ${TMPDIR}/PKGVER_ALL.TXT ${TMPDIR}/PKGVER_INSTALLED.TXT | grep ^+ | tail -n +2

      ;;
    mirror)
      shift
      ;;
    locate)
      shift
      SEARCHLIST=$@
      #echo "Searching for $SEARCHLIST"
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $SEARCHLIST ; do
          FILEPATH=$(grep "SlackBuild$"  ${REPO_DB_SOURCE}/CHECKSUMS.md5 | \
            cut -d. -f2- |sed 's/^\s*.//g'| grep "/${PACKAGE}.SlackBuild$" | cut -d. -f1 | \
            rev | cut -d/ -f2- | rev)
          if [ -n "$FILEPATH" ] ; then
            #echo "$FILEPATH" | sed "s;.*;${TAG}: ${REPO_SOURCE}/&;"
            echo "$FILEPATH" | sed "s;.*;${TAG}: &;"
          fi
        done
      done
      ;;
    version)
      shift
      VERSIONLIST=$@
      shift $#
      for PACKAGE in $VERSIONLIST ; do
        DB_PKG_VER=""
        FOUND=""
        INSTALLED=""
        gettags_from_config_file
        for TAG in $REPO_TAGS ; do  
          getrepo_vars
          if grep "^${PACKAGE} " ${REPO_DB}/patches/PKGVER.TXT >/dev/null 1>/dev/null 2>/dev/null ; then
            FOUND="1"
            DB_PKG_VER="$(grep "^${PACKAGE} " ${REPO_DB}/patches/PKGVER.TXT)"
          elif grep "^${PACKAGE} " ${REPO_DB}/extra/PKGVER.TXT >/dev/null 1>/dev/null 2>/dev/null ; then
            FOUND="1"
            DB_PKG_VER="$(grep "^${PACKAGE} " ${REPO_DB}/extra/PKGVER.TXT)"
          elif grep "^${PACKAGE} " ${REPO_DB}/PKGVER.TXT  >/dev/null 1>/dev/null 2>/dev/null ; then
            FOUND="1"
            DB_PKG_VER="$(grep "^${PACKAGE} " ${REPO_DB}/PKGVER.TXT)"
          fi
        done
          #echo "DB_PKG_VER: $DB_PKG_VER"
          if [ ! -z "$DB_PKG_VER" ] ; then
            DB_PKG_VER=$( echo $DB_PKG_VER | cut -d " " -f2)
            #echo "DB_PKG_VER: $DB_PKG_VER"
          else
            DB_PKG_VER="Not in repo!!."
          fi
          INST_PKG_VER_LINE=$(ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f4- | rev | grep -n "^${PACKAGE}$" | cut -d: -f1)
          #echo "INST_PKG_VER_LINE: $INST_PKG_VER_LINE"
          if [ ! -z $INST_PKG_VER_LINE ] ; then
            INSTALLED="1"
            #echo $INST_PKG_VER_LINE
            INST_PKG_VER="$(ls -1 /var/lib/pkgtools/packages/ | sed -n "${INST_PKG_VER_LINE}p" | rev | cut -d- -f3 | rev)"
            #echo "LAST: ${DB_PKG_VER} INSTALLED: ${INST_PKG_VER}"
          else
            INST_PKG_VER="Not installed."
          fi
          if [ "$FOUND" == "1" ] || [ "$INSTALLED" == "1" ] ; then 
            echo "${PACKAGE}: last ${DB_PKG_VER} ; current ${INST_PKG_VER}"
          fi
      done
      ;;
    forced)
      shift
      FORCEDLIST=$@
      shift $#
      rm ${TMPDIR}/PKG_INSTALLED.TXT 2>/dev/null
      ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f3- |cut -d- -f2- |rev | sort > ${TMPDIR}/PKG_INSTALLED.TXT
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $FORCEDLIST ; do
          if [ "$TAG" == "SLACKWARE" ] ; then
            continue
          elif [ "$TAG" == "SBO" ] ; then
            rm ${TMPDIR}/REQUIRES_FOUND.TXT 2>/dev/null
            cat ${REPO_DB}/REQUIRES.TXT | grep -E " ${PACKAGE} |\"${PACKAGE}|${PACKAGE}\"" | \
              cut -d: -f1- |rev | cut -d/ -f1 | cut -d: -f3- | cut -d. -f 2- | rev | sort > ${TMPDIR}/REQUIRES_FOUND.TXT
            diff -u ${TMPDIR}/PKG_INSTALLED.TXT ${TMPDIR}/REQUIRES_FOUND.TXT | grep "^ "
          fi
        done
      done
      ;;
    *)
      echo "USAGE:"
      echo "      $0 : "
      exit 0
      ;;
  esac
done



# vim:sw=2:ts=2:et:
