#!/bin/bash
#
## Copyright (c) 2024 VielLosero 
#
# This file is part of srpm. 
# srpm is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, 
# or (at your option) any later version.
#
# srpm is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with srpm. If not, see <https://www.gnu.org/licenses/>. 
#
## srpm, - A simple repository & package manager for slackbuilds.

# Get function sources.
source /usr/libexec/srpm/srpm.functions.sh

TMPDIR=${TMPDIR:-/tmp/srpm} && [[ -d $TMPDIR ]] || mkdir -vp $TMPDIR


while [ -n "$1" ] ; do
  case $1 in  
    install)
      shift
      ;;
    remove)
      shift
      ;;
    search)
      shift
      SEARCHLIST=$@
      #echo "Searching for $SEARCHLIST"
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $SEARCHLIST ; do
          FILEPATH=$(grep "SlackBuild$"  ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5 | \
            sed 's:.*/::' | grep -i "^${PACKAGE}.*.SlackBuild$" | cut -d. -f1)
          if [ -n "$FILEPATH" ] ; then
            echo "$FILEPATH" | sed "s/.*/${TAG}: &/"
          fi
        done
      done
      ;;
    search-file)
      shift
      ;;
    description)
      shift
      DESCLIST=$@
      #echo "Description for $DESCLIST"
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $DESCLIST ; do
          #grep -n ".*${PACKAGE}.*.slack-desc" ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5
          # sanity check, add  | head -1
          #grep -n "${PACKAGE}.slack-desc" ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5 | head -1
          #grep -n "${PACKAGE}.slack-desc" ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5 | head -1 | cut -d " " -f3
          #FILEPATH=$(grep -n "\/${PACKAGE}.slack-desc" ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5 | head -1 | cut -d " " -f3)
          FILEPATH=$(grep -n "\/${PACKAGE}.slack-desc" ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5 | head -1 | cut -d " " -f3)
          if [ -n "$FILEPATH" ] ; then
            FILE="${REPO_DB}/${REPO_VERSION}/${FILEPATH}"
            #echo $FILE
            if [ -e $FILE ] ; then 
              cat "${REPO_DB}/${REPO_VERSION}/${FILEPATH}" | tail +9
            else
              # if no find on db try to download and show
              case $SOURCE_TYPE in
               file)
                 SOURCE="$(echo $REPO_SOURCE | sed 's%file://%%')"
                 ;;
               http|https)
                 SOURCE=$(echo $REPO_SOURCE)
                 #wget file on db and cat it
                 ;;
               ftp)
                 SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
                 ;;
               rsync)
                 SOURCE="$(echo $REPO_SOURCE)"
                 ;;
               git)
                 SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
                 ;;
              esac
            fi
          fi
        done
      done
      ;;
    needed)
      shift
      NEEDLIST=$@
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PKG in $NEEDLIST ; do
          #get_requires $PKG
          REQUIRES=("$PKG")
          #[[ $FOUND == 1 ]] && [[ -n $REQUIRES ]] && echo "$PKG $REQUIRES"
          #[[ $FOUND == 1 ]] && [[ -n $REQUIRES ]] && echo "${REQUIRES[@]}"
          while [ -n "${REQUIRES[*]}" ] ; do 
            for index in ${!REQUIRES[@]} ; do 
              #echo "array:${REQUIRES[@]}"
              #echo "${REQUIRES[$index]}"
              get_requires "${REQUIRES[$index]}"
              unset "REQUIRES[$index]"
              #echo "rest:${REQUIRES[@]}"
              #echo "rest:${#REQUIRES[@]}"
            done
          done
          #    # if no find on db try to download and show
          #    case $SOURCE_TYPE in
          #     file)
          #       SOURCE="$(echo $REPO_SOURCE | sed 's%file://%%')"
          #       ;;
          #     http|https)
          #       SOURCE=$(echo $REPO_SOURCE)
          #       #wget file on db and cat it
          #       ;;
          #     ftp)
          #       SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
          #       ;;
          #     rsync)
          #       SOURCE="$(echo $REPO_SOURCE)"
          #       ;;
          #     git)
          #       SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
          #       ;;
          #    esac
          #  fi
          #fi
        done
      done
      ;;
    upgrade)
      shift
        #while read PKG ; do
        #  #echo $PKG
        #  LAST=$(/usr/sbin/srpm -pv $PKG | cut -d" " -f3)
        #  CURRENT=$(/usr/sbin/srpm -pv $PKG | cut -d" " -f6)
        #  #echo "LAST: $LAST CURRENT: $CURRENT"
        #  if [[ "$LAST" != "$CURRENT" ]] ; then 
        #    /usr/sbin/srpm -pv $PKG
        #  fi
        #done <<< $(ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f4- | rev) 
        rm ${TMPDIR}/PKGVER_ALL.TXT 2>/dev/null
        touch ${TMPDIR}/PKGVER_ALL.TXT
        gettags_from_config_file
        for TAG in $REPO_TAGS ; do  
          getrepo_vars
          if [ -e ${REPO_DB}/${REPO_VERSION}/patches/PKGVER.TXT ] ; then
            cat ${REPO_DB}/${REPO_VERSION}/patches/PKGVER.TXT >> ${TMPDIR}/PKGVER_ALL.TXT
          fi
          if [ -e ${REPO_DB}/${REPO_VERSION}/extra/PKGVER.TXT ] ; then
            cat ${REPO_DB}/${REPO_VERSION}/extra/PKGVER.TXT >> ${TMPDIR}/PKGVER_ALL.TXT
          fi
          if [ -e ${REPO_DB}/${REPO_VERSION}/PKGVER.TXT ] ; then
            cat ${REPO_DB}/${REPO_VERSION}/PKGVER.TXT >> ${TMPDIR}/PKGVER_ALL.TXT
          fi
        done
        # sort the file
        sort -o ${TMPDIR}/PKGVER_ALL.TXT ${TMPDIR}/PKGVER_ALL.TXT 
        rm ${TMPDIR}/PKGVER_INSTALLED.TXT 2>/dev/null
        ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f3- | sed 's/-/ /'| rev | sort > ${TMPDIR}/PKGVER_INSTALLED.TXT 
        diff -u ${TMPDIR}/PKGVER_ALL.TXT ${TMPDIR}/PKGVER_INSTALLED.TXT | grep ^+ | tail -n +2

      ;;
    mirror)
      shift
      ;;
    locate)
      shift
      SEARCHLIST=$@
      #echo "Searching for $SEARCHLIST"
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $SEARCHLIST ; do
          FILEPATH=$(grep "SlackBuild$"  ${REPO_DB}/${REPO_VERSION}/CHECKSUMS.md5 | \
            cut -d. -f2- |sed 's/^\s*.//g'| grep "/${PACKAGE}.SlackBuild$" | cut -d. -f1 | \
            rev | cut -d/ -f2- | rev)
          if [ -n "$FILEPATH" ] ; then
            #echo "$FILEPATH" | sed "s;.*;${TAG}: ${REPO_SOURCE}/&;"
            echo "$FILEPATH" | sed "s;.*;${TAG}: &;"
          fi
        done
      done
      ;;
    version)
      shift
      VERSIONLIST=$@
      shift $#
      gettags_from_config_file
      for TAG in $REPO_TAGS ; do  
        getrepo_vars
        for PACKAGE in $VERSIONLIST ; do
          if DB_PKG_VER="$(grep "^${PACKAGE} " ${REPO_DB}/${REPO_VERSION}/PKGVER.TXT 2>/dev/null)"; then
            if grep "^${PACKAGE} " ${REPO_DB}/${REPO_VERSION}/patches/PKGVER.TXT >/dev/null 1>/dev/null 2>/dev/null ; then
              DB_PKG_VER="$(grep "^${PACKAGE} " ${REPO_DB}/${REPO_VERSION}/patches/PKGVER.TXT)"
            fi
            if grep "^${PACKAGE} " ${REPO_DB}/${REPO_VERSION}/extra/PKGVER.TXT >/dev/null 1>/dev/null 2>/dev/null ; then
              DB_PKG_VER="$(grep "^${PACKAGE} " ${REPO_DB}/${REPO_VERSION}/extra/PKGVER.TXT)"
            fi
            #echo "DB_PKG_VER: $DB_PKG_VER"
            DB_PKG_VER=$( echo $DB_PKG_VER | cut -d " " -f2)
            #echo "DB_PKG_VER: $DB_PKG_VER"
            INST_PKG_VER_LINE=$(ls -1 /var/lib/pkgtools/packages/ | rev | cut -d- -f4- | rev | grep -n "^${PACKAGE}$" | cut -d: -f1)
            #echo "INST_PKG_VER_LINE: $INST_PKG_VER_LINE"
            if [ ! -z $INST_PKG_VER_LINE ] ; then
              #echo $INST_PKG_VER_LINE
              INST_PKG_VER="$(ls -1 /var/lib/pkgtools/packages/ | sed -n "${INST_PKG_VER_LINE}p" | rev | cut -d- -f3 | rev)"
              #echo "LAST: ${DB_PKG_VER} INSTALLED: ${INST_PKG_VER}"
            else
              INST_PKG_VER="Not installed."
            fi
            echo "${PACKAGE}: last ${DB_PKG_VER} ; current ${INST_PKG_VER}"
          fi
        done
      done
      ;;
    *)
      echo "USAGE:"
      echo "      $0 : "
      exit 0
      ;;
  esac
done



