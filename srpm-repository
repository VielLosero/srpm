#!/bin/bash
#
## Copyright (c) 2024 VielLosero 
#
# This file is part of srpm. 
# srpm is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, 
# or (at your option) any later version.
#
# srpm is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with srpm. If not, see <https://www.gnu.org/licenses/>. 
#
## srpm, - A simple repository & package manager for Slackware Linux.
#
# Slackware® is a Registered Trademark of Patrick Volkerding. 
# Linux® is a Registered Trademark of Linus Torvalds.

source /usr/libexec/srpm/srpm.functions.sh

TMPDIR=${TMPDIR:-/tmp/srpm} && [[ -d $TMPDIR ]] || mkdir -vp $TMPDIR

info(){
#get repos (tags) from repo config file 
#REPO_TAGS=$(cat $REPO_CONFIG_FILE | grep "^REPO_" | cut -d_ -f2 | sort -u)
gettags_from_config_file
#clear
echo "----------------------------"
echo "- Repository information"
echo "----------------------------"
for TAG in $REPO_TAGS ; do  
  cat $REPO_CONFIG_FILE | grep "^REPO_${TAG}"
  echo "----------------------------"
done
}


update(){
  echo "+--------------------------+"
  #get repos (tags) from repo config file 
  gettags_from_config_file
  # process tags
  for TAG in $REPO_TAGS ; do  
    # reset update
    UPDATE_REPO=
    # notice the start
    echo "Checking available updates for ${TAG}." 
    # get vars for each repository
    # REPO_NAME REPO_VERSION REPO_DB REPO_SOURCE REPO_SOURCE_TYPE REPO_UPDATE REPO_UPDATE_TYPE
    # for a description of vars look into repository config file
    getrepo_vars 
    mkdir -p ${TMPDIR}/${REPO_NAME} 2>/dev/null
  case $REPO_UPDATE_TYPE in
    http|https)
      # check if ChangeLog exist and show changes 
      if [ -e $DBFILE_CHANGELOG ] ; then 
        curl -L -s ${REPO_UPDATE}/ChangeLog.txt --output-dir ${TMPDIR}/${REPO_NAME}
        SOURCE_CHANGELOG_DATE=$(cat ${TMPDIR}/${REPO_NAME}/ChangeLog.txt | head -1)
        LOCAL_CHANGELOG_DATE=$(cat ${DBFILE_CHANGELOG} | head -1)
        if [ "$SOURCE_CHANGELOG_DATE" != "$LOCAL_CHANGELOG_DATE" ] ; then
          echo "New ChangeLog updates found."
          # Show ChangeLog removing las date and separator.
          cat ${TMPDIR}/${REPO_NAME}/ChangeLog.txt | grep -B 1000 "$LOCAL_CHANGELOG_DATE" | head -n -2
          UPDATE_REPO=1
        else
          echo "Last ChangeLog date: $SOURCE_CHANGELOG_DATE"
          echo "Nohing to do."
          UPDATE_REPO=0
        fi
      else
        # if local ChangeLog not exist update
          UPDATE_REPO=1
      fi
      ####################
      # start update repo
      ####################
      if [ "$UPDATE_REPO" == "1" ] ; then
        # check signature before update
        curl -L -s ${REPO_UPDATE}/{CHECKSUMS.md5.asc,CHECKSUMS.md5} --output-dir ${TMPDIR}/${REPO_NAME} || exit 1
        if gpg --verify  ${TMPDIR}/${REPO_NAME}/CHECKSUMS.md5.asc &> /dev/null ; then
          echo "CHECKSUMS.md5 signature ok."
          # try to mirror http site with ... if source repo = file 
          # wget ....
          #####################
          # Then update DBFILES
          #####################
          echo "Copying DBFILES."
          cp ${TMPDIR}/${REPO_NAME}/CHECKSUMS.md5 $DBFILE_CHECKSUMS 
          cp ${TMPDIR}/${REPO_NAME}/CHECKSUMS.md5.asc $DBFILE_CHECKSUMS_ASC
          cp ${TMPDIR}/${REPO_NAME}/ChangeLog.txt $DBFILE_CHANGELOG
          if [ "$TAG" == "SBO" ] ; then
            curl -L -s ${REPO_UPDATE}/SLACKBUILDS.TXT -o $DBFILE_SLACKBUILDS || exit 1
          fi
          #####################
          # Then make helpers
          #####################
          # now update db
          echo "Making helpers files."
          make_packages_version_db $TAG
          make_packages_requires_db $TAG
        fi
      fi
      ;;
    ftp)
      SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
      ;;
    rsync)
      # check if there is something to update
      rsync -aqP ${REPO_UPDATE}/ChangeLog.txt ${TMPDIR}/${REPO_NAME} || exit 1
        # check if local ChangeLog exist and show changes 
        if [ -e $DBFILE_CHANGELOG ] ; then 
          SOURCE_CHANGELOG_DATE=$(cat ${TMPDIR}/${REPO_NAME}/ChangeLog.txt | head -1)
          LOCAL_CHANGELOG_DATE=$(cat ${DBFILE_CHANGELOG} | head -1)
          if [ "$SOURCE_CHANGELOG_DATE" != "$LOCAL_CHANGELOG_DATE" ] ; then
            echo "New ChangeLog updates found."
            cat ${TMPDIR}/${REPO_NAME}/ChangeLog.txt | grep -B 1000 "$LOCAL_CHANGELOG_DATE" |head -n -2
            UPDATE_REPO=1
          else
            echo "Last ChangeLog date: $SOURCE_CHANGELOG_DATE"
            echo "Nohing to do."
            UPDATE_REPO=0
          fi
        else
        # if local ChangeLog not exist update
          UPDATE_REPO=1
        fi
        ####################
        # start update repo
        ####################
        if [ "$UPDATE_REPO" == "1" ] ; then
          # check signature before update
          rsync -aqP ${REPO_UPDATE}/CHECKSUMS.md5 ${REPO_UPDATE}/CHECKSUMS.md5.asc ${TMPDIR}/${REPO_NAME}/ || exit 1
          if gpg --verify  ${TMPDIR}/${REPO_NAME}/CHECKSUMS.md5.asc &> /dev/null ; then
            echo "CHECKSUMS.md5 signature ok."
            # CHECKSUM signature ok update
            case "$REPO_SOURCE_TYPE" in
              # local repo 
              file)
                # Check if there is more than 1 rsync work
                if [ -z $(pgrep rsync) ] ; then
                  # Remove file:// from repo source 
                  #REPO_SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
                  LOCAL_MIRROR=$(echo $REPO_SOURCE | sed 's%file://%%')
                  # check if local mirror link is set
                  if [ -L ${REPO_DB_SOURCE} ] ; then
                    true
                  else
                    # TODO: sanity chek if some put source file from ${REPO_DB_SOURCE} (srpm/repositories/...)
                    # don't use rm -rf because dangerouse, clean it manualy and remove dir is more safe.
                    # on a clean start that will work ... if start is not clean .... TODO
                    rmdir ${REPO_DB_SOURCE} || echo "Clean ${REPO_DB_SOURCE} and try again plz."
                    # create a symlink from mirror to db
                    ln -s ${LOCAL_MIRROR} ${REPO_DB_SOURCE}
                  fi
                  # update repo after link 
                  echo "Updating silent: rsync -aqP --delete ${REPO_UPDATE}/ ${LOCAL_MIRROR}/" 
                  rsync -aqP --delete ${REPO_UPDATE}/ ${LOCAL_MIRROR}/ || exit 1
                else
                  echo "To many rsync run , wait a few and try again"
                fi
                #####################
                # Then update DBFILES
                #####################
                echo "Copying DBFILES."
                cp ${LOCAL_MIRROR}/CHECKSUMS.md5 $DBFILE_CHECKSUMS 
                cp ${LOCAL_MIRROR}/CHECKSUMS.md5.asc $DBFILE_CHECKSUMS_ASC
                cp ${LOCAL_MIRROR}/ChangeLog.txt $DBFILE_CHANGELOG
                if [ "$TAG" == "SBO" ] ; then
                  cp ${LOCAL_MIRROR}/SLACKBUILDS.TXT $DBFILE_SLACKBUILDS
                fi
                #####################
                # Then make helpers
                #####################
                # now update db
                echo "Making helpers files."
                make_packages_version_db $TAG
                make_packages_requires_db $TAG
                ;;
              # no local repo then copy files only
              rsync)
                #####################
                # Then update DBFILES
                #####################
                echo "Copying DBFILES."
                cp ${TMPDIR}/${REPO_NAME}/CHECKSUMS.md5 $DBFILE_CHECKSUMS 
                cp ${TMPDIR}/${REPO_NAME}/CHECKSUMS.md5.asc $DBFILE_CHECKSUMS_ASC
                cp ${TMPDIR}/${REPO_NAME}/ChangeLog.txt $DBFILE_CHANGELOG
                if [ "$TAG" == "SBO" ] ; then
                  rsync -avP ${REPO_UPDATE}/SLACKBUILDS.TXT $DBFILE_SLACKBUILDS || exit 1
                fi
                #####################
                # Then make helpers
                #####################
                # now update db
                echo "Making helpers files."
                make_packages_version_db $TAG
                make_packages_requires_db $TAG
                ;;
            esac
          else
            # signature not ok
            echo "###################################"
            echo "### WARNING: BAD gpg signature. ###"
            echo "###################################"
            echo "+--------------------------+"
          fi
        fi
      ;;
    git)
      SOURCE=$(echo $REPO_SOURCE | sed 's%file://%%')
      ;;
  esac
  
  echo "+--------------------------+"
done
}

while [ -n "$1" ] ; do
  case $1 in  
    info)
      shift
      info
      ;;
    update)
      shift
      update
      ;;
    select)
      ;;
    clean-db)
      ;;
    *)
      echo "USAGE:"
      echo "      $0 : "
      shift $#
      ;;
  esac
done

# vim:sw=2:ts=2:et:
